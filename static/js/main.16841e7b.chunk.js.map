{"version":3,"sources":["assets/Logo/logo.png","assets/backgrounds/img2.jpg","kanbanBoard/Banner.js","Utils/Items.js","kanbanBoard/TaskComponent.js","kanbanBoard/selectors.js","kanbanBoard/NewTaskCardComponent.js","kanbanBoard/TaskContainerComponent.js","kanbanBoard/TaskListContainerComponent.js","kanbanBoard/actions.js","App.js","kanbanBoard/reducers.js","store.js","index.js"],"names":["module","exports","BannerDiv","styled","div","LogoDiv","img","Banner","className","ItemTypes","CardItem","props","isDragging","DeleteCardDiv","TaskCard","task","onDeleteTaskPressed","useDrag","item","type","id","collect","monitor","drag","ref","onClick","getTasks","state","tasks","data","getLists","lists","getTasksForList","createCachedSelector","listName","filter","status","getVisibleNewCard","visibleListCreator","NewTaskCardDiv","NewTaskCardArea","textarea","ButtonsDiv","Buttons","button","connect","onCreatePressed","onCancelPressed","useState","inputValue","setInputValue","placeHolder","setPlaceHolderValue","autoFocus","onKeyDown","e","target","style","height","scrollHeight","auto_grow","placeholder","value","onChange","some","toLowerCase","trim","TaskListWrapper","ListHeaderText","b","ListHeaderDiv","ListContainer","CardDeck","CardCreatorDiv","CardCreatorButton","DeleteListDiv","ownProps","showNewCardType","onAddTaskPressed","onDeleteListPressed","deleteTasksForList","onStatusUpdate","useDrop","accept","drop","isOver","draggable","bg","map","icon","faPlus","ListWrapper","ListCreatorDiv","ListCreatorInput","input","ListCreatorButton","dispatch","onAddListPressed","text","payload","list","createTask","newCard","deleteTask","taskId","updateTask","AppDiv","App","DndProvider","backend","HTML5Backend","taskInitialState","isLoading","listInitialState","reducers","action","newTask","concat","taskToRemove","listToRemove","listToUpdate","persistConfig","key","blacklist","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.16841e7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5160c008.png\";","module.exports = __webpack_public_path__ + \"static/media/img2.1448f169.jpg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport img from '../assets/Logo/logo.png';\r\nconst BannerDiv = styled.div`\r\n    height:4.5rem;\r\n    background-color: #303946;\r\n    padding:2px;\r\n`;\r\n\r\nconst LogoDiv = styled.div`\r\n    background-image: url(${img});\r\n    background-size: cover;\r\n    /* background-color: #1e20178f; */\r\n    height:4rem;\r\n    width:9rem;\r\n    margin:0px 10px 10px 10px;\r\n`;\r\n\r\nconst Banner = () => (\r\n    \r\n    <BannerDiv className=\"BannerClass\">\r\n        <LogoDiv className='logodiv'></LogoDiv>\r\n    </BannerDiv>\r\n    \r\n);\r\n\r\nexport default Banner;","export const ItemTypes = {\r\n    CARD: 'card',\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDrag } from 'react-dnd'\r\nimport { ItemTypes} from '../Utils/Items'\r\n\r\nconst CardItem = styled.div`\r\n    &:hover{\r\n        background-color: #909090;\r\n        transform: scale(1.02);\r\n        transition: all 0.1s ease;\r\n    }\r\n    &:active{\r\n        transform: scale(1.02) rotate(2deg);\r\n    }\r\n    opacity: ${props =>(props.isDragging? '0.1':'1')};\r\n    box-shadow:0 1px 0 rgba(9,30,66,.25);\r\n    position:relative;\r\n    border-radius:3px;\r\n    background-color: #ececec;\r\n    min-height:20px;\r\n    padding: 8px;\r\n    margin:8px;\r\n`;\r\n\r\nconst DeleteCardDiv = styled.div`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst TaskCard = ({ task=[], onDeleteTaskPressed }) => {\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.CARD,\r\n            id: task.task,\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n    const content = (\r\n        <CardItem\r\n        ref= { drag }\r\n        isDragging = { isDragging }\r\n        // opacity={isDragging? '0.1':'1'}\r\n            // onDragStart = {(e) => e.dataTransfer.setData(\"taskId\", task.id)}\r\n        >\r\n            <DeleteCardDiv\r\n            onClick={() => {\r\n                onDeleteTaskPressed(task)\r\n            }}>\r\n                <span className=\"close\">\r\n                        x\r\n                </span>\r\n            </DeleteCardDiv>\r\n            <div>\r\n                <span>{ task.task }</span>\r\n            </div>  \r\n        </CardItem>\r\n    )\r\n    return content;\r\n};\r\n\r\nexport default TaskCard;","import createCachedSelector from 're-reselect'\r\nimport createSelector from 'reselect'\r\nexport const getTasks = state =>state.tasks.data;\r\nexport const getListType = (state, listName) => listName;\r\nexport const getLists = state => state.lists.data;\r\n\r\nexport const getTasksForList = createCachedSelector(\r\n    getTasks,\r\n    getListType,\r\n    (tasks, listName) => tasks.filter(task => task.status === listName)\r\n)\r\n(\r\n    (tasks, listName) => listName\r\n);\r\n\r\nexport const getVisibleNewCard = state => state.visibleListCreator;","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport { getTasks } from './selectors'\r\n\r\nconst NewTaskCardDiv = styled.div`\r\n    box-shadow:0 1px 0 rgba(9,30,66,.25);\r\n    position:relative;\r\n    border-radius:3px;\r\n    background-color: white;\r\n    min-height:20px;\r\n    padding: 8px;\r\n    margin:8px;\r\n`;\r\n\r\nconst NewTaskCardArea = styled.textarea`\r\n    width: 100%;\r\n    min-height:100px;\r\n    border-style:none;\r\n    outline:0ch;\r\n    overflow-y:hidden;\r\n`;\r\nconst ButtonsDiv = styled.div`\r\n    display:flex;\r\n    justify-content:space-evenly;\r\n`;\r\nconst Buttons = styled.button`\r\n\r\n`;\r\nfunction auto_grow(e) {\r\n    e.target.style.height = 'inherit';\r\n    e.target.style.height = `${e.target.scrollHeight}px`; \r\n}\r\nconst NewTaskCard = ({status, onCreatePressed, tasks=[], onCancelPressed}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [placeHolder, setPlaceHolderValue] = useState('Type your new task here');\r\n    const content = (\r\n        <NewTaskCardDiv>\r\n            <NewTaskCardArea\r\n            autoFocus = {true}\r\n            onKeyDown={e => auto_grow(e)}\r\n            // type=\"text\"\r\n            placeholder= {placeHolder}\r\n            value={inputValue}\r\n            onChange={e => setInputValue(e.target.value)}>\r\n            </NewTaskCardArea>\r\n            <ButtonsDiv>\r\n                <Buttons\r\n                    className=\"btn btn-success btn-sm\"\r\n                    onClick = {() => {\r\n                        if(!(inputValue===\"\")){\r\n                            const isDuplicate = tasks.some(task=>task.task.toLowerCase()===inputValue.trim().toLowerCase());\r\n                            if(!isDuplicate){\r\n                                onCreatePressed(inputValue.trim(), status);\r\n                                setPlaceHolderValue('Type your new task here');\r\n                                setInputValue('');\r\n                            }\r\n                            else{\r\n                                setPlaceHolderValue('This task already exists! Enter Something else')\r\n                                setInputValue('');\r\n                            }\r\n                        }\r\n                    }\r\n                    }\r\n                >\r\n                    <span>Confirm</span>\r\n                </Buttons>\r\n                <Buttons \r\n                    className=\"btn btn-danger btn-sm\"\r\n                    onClick={() => onCancelPressed()\r\n                    }\r\n                >\r\n                    <span>Cancel</span>\r\n                </Buttons>\r\n            </ButtonsDiv>\r\n        </NewTaskCardDiv>\r\n    )\r\n    return content;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    tasks: getTasks(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(NewTaskCard);","import React from 'react';\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport styled from 'styled-components';\r\nimport TaskCard from \"./TaskComponent\";\r\nimport { connect } from 'react-redux'\r\nimport { getTasksForList, getVisibleNewCard } from './selectors'\r\nimport NewTaskCard from './NewTaskCardComponent'\r\nimport { useDrop } from 'react-dnd';\r\nimport { ItemTypes } from '../Utils/Items';\r\n\r\nconst TaskListWrapper = styled.div`\r\n    margin:0 10px;\r\n    padding: 8px;\r\n    width: 230px;\r\n`;\r\nconst ListHeaderText = styled.b`\r\n    padding: 8px;\r\n`;\r\nconst ListHeaderDiv = styled.div`\r\n    height: 38px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-top-left-radius: 4px;\r\n    border-top-right-radius: 4px;\r\n`;\r\nconst ListContainer = styled.div`\r\n    \r\n    background-color:#cac6c2c9;\r\n    width: 230px;\r\n    max-height:100%;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 5px 1px grey;\r\n    /* position:relative; */\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\nconst CardDeck = styled.div`\r\n    overflow-y: scroll;\r\n    overflow-x: hidden;\r\n    min-height:50px;\r\n    box-shadow: inset 0px 0px 6px 3px #8080808a;\r\n`;\r\nconst CardCreatorDiv = styled.div`\r\n    height: 38px;\r\n    display: flex;\r\n    align-items:center;\r\n`;\r\nconst CardCreatorButton = styled.button`\r\n    &:hover{\r\n        background-color: #9c9c9c;\r\n    }\r\n    padding:7px;\r\n    border:0ch;    \r\n    background-color:#cac6c2c9;\r\n    width: 100%;\r\n    text-align: left;\r\n`;\r\n\r\nconst DeleteListDiv = styled.div`\r\n    cursor: pointer;\r\n    padding: 2px 4px;\r\n    /* transform: translate(0%, -50%); */\r\n`;\r\n\r\n\r\nconst TaskContainer = ({\r\n    listName,\r\n    tasks=[], \r\n    onCreatePressed,\r\n    onAddTaskPressed,\r\n    onCancelPressed,\r\n    showNewCardType,\r\n    onDeleteListPressed,\r\n    deleteTasksForList,\r\n    onDeleteTaskPressed,\r\n    onStatusUpdate}) => {\r\n        const[{isOver}, drop] = useDrop({\r\n            accept: ItemTypes.CARD,\r\n            drop: (item, monitor) => onStatusUpdate(item.id, listName),\r\n            collect: monitor => ({\r\n                isOver: !!monitor.isOver(),\r\n            }),\r\n        });\r\n    const content = (\r\n        <TaskListWrapper>\r\n            <ListContainer className='ListContainer'draggable=\"true\">\r\n                <ListHeaderDiv>\r\n                    <ListHeaderText>\r\n                        { listName }\r\n                    </ListHeaderText>\r\n                    <DeleteListDiv\r\n                    onClick={() => {\r\n                        onDeleteListPressed(listName)\r\n                        deleteTasksForList(listName)\r\n                    }}>\r\n                        <span className=\"close\">\r\n                                x\r\n                        </span>\r\n                    </DeleteListDiv>\r\n                </ListHeaderDiv>\r\n                <CardDeck \r\n                ref= {drop}\r\n                bg= {isOver ? 'Green' : 'Yellow'}>\r\n                    { tasks.map(task => <TaskCard \r\n                    task= { task }\r\n                    onDeleteTaskPressed={onDeleteTaskPressed}/>)}\r\n                    { showNewCardType===listName ?  \r\n                    <NewTaskCard\r\n                        status = { listName }\r\n                        onCreatePressed = { onCreatePressed }\r\n                        onCancelPressed = { onCancelPressed }/>:\r\n                        null\r\n                    }\r\n                </CardDeck>\r\n                <CardCreatorDiv>\r\n                    <CardCreatorButton\r\n                        onClick = {() => \r\n                                onAddTaskPressed(listName)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlus} />\r\n                        <b>Add New Task</b>\r\n                    </CardCreatorButton>\r\n                </CardCreatorDiv>\r\n            </ListContainer>\r\n        </TaskListWrapper>\r\n    );\r\n    return content;\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    tasks: getTasksForList(state, ownProps.listName),\r\n    showNewCardType: getVisibleNewCard(state),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(TaskContainer);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport TaskContainer from './TaskContainerComponent';\r\nimport { getLists } from './selectors';\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    createList,\r\n    deleteList,\r\n    deleteTasksForList,\r\n    updateNewcardVisibility,\r\n    removeNewcardVisibility,\r\n    createTask,\r\n    deleteTask,\r\n    updateTask,} from './actions'\r\n\r\nconst ListWrapper = styled.div`\r\n    padding: 8px;\r\n    overflow-x:auto;\r\n    overflow-y:hidden;\r\n    display:flex;\r\n    position: absolute;\r\n    padding-bottom: 8px;\r\n    bottom: 0;\r\n    top: 4.5rem;\r\n    right: 0;\r\n    left: 0;\r\n`;\r\n\r\nconst ListCreatorDiv = styled.div`\r\n    margin:0 10px;\r\n    padding: 8px;\r\n    width: 230px;\r\n`;\r\n\r\nconst ListCreatorInput = styled.input`\r\n    width: 100%;\r\n    min-width:200px;\r\n    height: 40px;\r\n    border-style: none;\r\n    border-top-right-radius:4px;\r\n    border-top-left-radius:4px;\r\n    padding:8px;\r\n    background-color:#cac6c2;\r\n    box-shadow: 0px 0px 5px 1px grey;\r\n`;\r\nconst ListCreatorButton = styled.button`\r\n    width: 100%;\r\n    height: 40px;\r\n    border-style: none;\r\n    border-top-right-radius:0px;\r\n    border-top-left-radius:0px;\r\n    box-shadow: 0px 0px 5px 1px grey;\r\n`;\r\n\r\nconst TaskListContainer = ({\r\n    lists=[],\r\n    onAddListPressed,\r\n    onDeleteListPressed,\r\n    deleteTasksForList,\r\n    onAddTaskPressed,\r\n    onCancelPressed,\r\n    onCreatePressed,\r\n    onDeleteTaskPressed,\r\n    onStatusUpdate}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [placeHolder, setPlaceHolderValue] = useState(\"Enter List Name\");\r\n    const content = (\r\n        <ListWrapper>\r\n            {lists.map(list => <TaskContainer \r\n                listName={list} \r\n                onDeleteListPressed={onDeleteListPressed}\r\n                deleteTasksForList={deleteTasksForList}\r\n                onAddTaskPressed={onAddTaskPressed}\r\n                onCancelPressed={onCancelPressed}\r\n                onCreatePressed={onCreatePressed}\r\n                onDeleteTaskPressed={onDeleteTaskPressed}\r\n                onStatusUpdate={onStatusUpdate}/>)}\r\n            <ListCreatorDiv>\r\n                <ListCreatorInput\r\n                    type=\"text\"\r\n                    placeholder = { placeHolder }\r\n                    value={inputValue}\r\n                    onChange={e => setInputValue(e.target.value)}/>\r\n                <ListCreatorButton\r\n                    className=\"btn btn-success\"\r\n                    onClick = {() => {\r\n                        if(!(inputValue===\"\")){\r\n                            const isDuplicate = lists.some(list=>list.toLowerCase()===inputValue.trim().toLowerCase());\r\n                            if(!isDuplicate){\r\n                                onAddListPressed(inputValue.trim());\r\n                                setInputValue('');\r\n                            }\r\n                            else{\r\n                                setPlaceHolderValue('This list already exists!')\r\n                                setInputValue('');\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon className = \"faIcon\" icon={faPlus} />\r\n                    <b>Add New List</b>\r\n                </ListCreatorButton>\r\n            </ListCreatorDiv>\r\n        </ListWrapper>\r\n    );\r\n    return content;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    lists: getLists(state)\r\n});\r\n\r\nconst dispatchStateToProps = dispatch => ({\r\n    onAddListPressed: text => dispatch(createList(text)),\r\n    onDeleteListPressed: listName => dispatch(deleteList(listName)),\r\n    onCreatePressed: (text, status) => dispatch(createTask(text, status)),\r\n    deleteTasksForList: listName => dispatch(deleteTasksForList(listName)),\r\n    onCancelPressed: () => dispatch(removeNewcardVisibility()),\r\n    onAddTaskPressed: listName => dispatch(updateNewcardVisibility(listName)),\r\n    onDeleteTaskPressed: task => dispatch(deleteTask(task)),\r\n    onStatusUpdate: (id, status) => dispatch(updateTask(id, status)),\r\n})\r\n\r\nexport default connect(mapStateToProps, dispatchStateToProps)(TaskListContainer);","export const UPDATE_NEWCARD_VISIBILITY = 'UPDATE_NEWCARD_VISIBILITY'\r\nexport const updateNewcardVisibility = newCard => ({\r\n    type:UPDATE_NEWCARD_VISIBILITY,\r\n    payload: { newCard }\r\n});\r\n\r\nexport const REMOVE_NEWCARD_VISIBILITY = 'REMOVE_NEWCARD_VISIBILITY'\r\nexport const removeNewcardVisibility = () => ({\r\n    type:REMOVE_NEWCARD_VISIBILITY,\r\n});\r\n\r\nexport const CREATE_TASK = 'CREATE_TASK'\r\nexport const createTask = (task, status) => ({\r\n    type: CREATE_TASK,\r\n    payload: { task, status }\r\n});\r\n\r\nexport const DELETE_TASK = 'DELETE_TASK'\r\nexport const deleteTask = task => ({\r\n    type: DELETE_TASK,\r\n    payload: { task }\r\n});\r\n\r\nexport const DELETE_TASKS_FOR_LIST = 'DELETE_TASKS_FOR_LIST'\r\nexport const deleteTasksForList = list => ({\r\n    type: DELETE_TASKS_FOR_LIST,\r\n    payload: { list }\r\n});\r\n\r\nexport const UPDATE_TASK = 'UPDATE_TASK'\r\nexport const updateTask = (taskId, status) => ({\r\n    type: UPDATE_TASK,\r\n    payload: { taskId, status }\r\n});\r\n\r\nexport const LOAD_TASKS_IN_PROGRESS = \"LOAD_TASKS_IN_PROGRESS\";\r\nexport const loadTasksInProgress = () => ({\r\n    type: 'LOAD_TASKS_IN_PROGRESS',\r\n});\r\n\r\nexport const LOAD_TASKS_SUCCESS = \"LOAD_TASKS_SUCCESS\"\r\nexport const loadTasksSuccess = tasks => ({\r\n    type: 'LOAD_TASKS_SUCCESS',\r\n    payload: { tasks }\r\n});\r\n\r\nexport const LOAD_TASKS_FAILURE = \"LOAD_TASKS_FAILURE\"\r\nexport const loadTasksFailure = () => ({\r\n    type: 'LOAD_TASKS_FAILURE',\r\n});\r\n\r\nexport const CREATE_LIST = 'CREATE_LIST'\r\nexport const createList = list => ({\r\n    type: CREATE_LIST,\r\n    payload: { list }\r\n});\r\n\r\nexport const DELETE_LIST = 'DELETE_LIST'\r\nexport const deleteList = list => ({\r\n    type: DELETE_LIST,\r\n    payload: { list }\r\n});\r\n\r\nexport const UPDATE_LIST = 'UPDATE_LIST'\r\nexport const updateList = list => ({\r\n    type: UPDATE_LIST,\r\n    payload: { list }\r\n});\r\n\r\nexport const LOAD_LISTS_IN_PROGRESS = \"LOAD_LISTS_IN_PROGRESS\";\r\nexport const loadListsInProgress = () => ({\r\n    type: 'LOAD_LISTS_IN_PROGRESS',\r\n});\r\n\r\nexport const LOAD_LISTS_SUCCESS = \"LOAD_LISTS_SUCCESS\"\r\nexport const loadListsSuccess = lists => ({\r\n    type: 'LOAD_LISTS_SUCCESS',\r\n    payload: { lists }\r\n});\r\n\r\nexport const LOAD_LISTS_FAILURE = \"LOAD_LISTS_FAILURE\"\r\nexport const loadListsFailure = () => ({\r\n    type: 'LOAD_LISTS_FAILURE',\r\n});","import React from 'react';\nimport Banner from './kanbanBoard/Banner'\nimport TaskListContainer from './kanbanBoard/TaskListContainerComponent'\nimport styled from 'styled-components';\nimport { DndProvider } from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\nimport img from './assets/backgrounds/img2.jpg';\n\nconst AppDiv = styled.div`\n  font-family: sans-serif;\n  position:absolute;\n  width:100%;\n  height:100%;\n  /* background-image: url(${img});\n  background-size: cover; */\n`;\n\nconst App = () =>\n  (\n    <AppDiv className=\"App\">\n      <Banner/>\n      <DndProvider backend={HTML5Backend}>\n        <TaskListContainer />\n      </DndProvider>\n    </AppDiv>\n  );\n\nexport default App;\n","import {\r\n    CREATE_TASK,\r\n    DELETE_TASK,\r\n    UPDATE_TASK,\r\n    CREATE_LIST,\r\n    DELETE_LIST,\r\n    UPDATE_LIST,\r\n    UPDATE_NEWCARD_VISIBILITY,\r\n    REMOVE_NEWCARD_VISIBILITY,\r\n    DELETE_TASKS_FOR_LIST,\r\n    LOAD_TASKS_IN_PROGRESS,\r\n    LOAD_TASKS_SUCCESS,\r\n    LOAD_TASKS_FAILURE,\r\n} from './actions'\r\n\r\nconst taskInitialState = { isLoading: false, data: [] }\r\nconst listInitialState = { isLoading: false, data: ['Open', 'In Progress', 'Completed'] }\r\n\r\nexport const visibleListCreator = (state='', action) =>{\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case UPDATE_NEWCARD_VISIBILITY:{\r\n            const { newCard } = payload;\r\n            return newCard;\r\n        }\r\n        case REMOVE_NEWCARD_VISIBILITY:{\r\n            return \"\";\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const lists = (state = listInitialState, action) =>{\r\n    const { type, payload} = action;\r\n    switch(type) {\r\n        case CREATE_LIST: {\r\n            const { list } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.concat(list)\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            const { list: listToRemove } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.filter(list=>list !== listToRemove)\r\n            };\r\n        }\r\n        case UPDATE_LIST: {\r\n            const { list: listToUpdate } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.map(list=>{\r\n                    if(list.id === listToUpdate.id){\r\n                        return listToUpdate;\r\n                    }\r\n                    return list;\r\n                }),\r\n            };\r\n        }\r\n        default:{\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const tasks = (state = taskInitialState, action) => {\r\n    const { type, payload} = action;\r\n    switch(type) {\r\n        case CREATE_TASK: {\r\n            const { task, status } = payload\r\n            const newTask = {\r\n                task,\r\n                status\r\n            }\r\n            return{\r\n                ...state,\r\n                data: state.data.concat(newTask)\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            const { task: taskToRemove } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.filter(task=>task.task !== taskToRemove.task)\r\n            };\r\n        }\r\n        case DELETE_TASKS_FOR_LIST: {\r\n            const { list: listToRemove } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.filter(task=>task.status !== listToRemove)\r\n            };\r\n        }\r\n        case UPDATE_TASK: {\r\n            const { taskId, status } = payload\r\n            return{\r\n                ...state,\r\n                data: state.data.map(task=>{\r\n                    if(task.task === taskId){\r\n                        return {...task, status:status};\r\n                    }\r\n                    return task;\r\n                }),\r\n            };\r\n        }\r\n        default:\r\n        return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { tasks, lists, visibleListCreator } from './kanbanBoard/reducers';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { autoMergeLevel2 } from 'redux-persist/lib/stateReconciler/autoMergeLevel2'\r\n\r\nconst reducers = {\r\n    tasks,\r\n    lists,\r\n    visibleListCreator,\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    blacklist:['visibleListCreator'],\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducers);\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const configureStore = () => \r\n    createStore(\r\n        persistedReducer,\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport {Provider} from 'react-redux';\nimport {configureStore} from \"./store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\nconst persistor = persistStore(store)\n\nReactDOM.render(\n  <Provider store = {store}>\n    <PersistGate\n      loading = {<div>Loading..</div>}\n      persistor = { persistor }>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}